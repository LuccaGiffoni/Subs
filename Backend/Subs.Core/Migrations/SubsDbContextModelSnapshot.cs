// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Subs.Core.Data;

#nullable disable

namespace Subs.Core.Migrations
{
    [DbContext(typeof(SubsDbContext))]
    partial class SubsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Subs.Domain.Models.History.ClientEventHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RollbackId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusAtEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientEventHistories");
                });

            modelBuilder.Entity("Subs.Domain.Models.History.SubscriptionEventHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RollbackId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusAtEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionsEventHistories");
                });

            modelBuilder.Entity("Subs.Domain.Models.Messages.ClientMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CallbackAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClientMessages");
                });

            modelBuilder.Entity("Subs.Domain.Models.Messages.SubscriptionMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CallbackAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionMessages");
                });

            modelBuilder.Entity("Subs.Domain.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Subs.Domain.Models.SubscriptionComponents.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Subs.Domain.Models.History.ClientEventHistory", b =>
                {
                    b.HasOne("Subs.Domain.Models.SubscriptionComponents.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Subs.Domain.Models.History.SubscriptionEventHistory", b =>
                {
                    b.HasOne("Subs.Domain.Models.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Subs.Domain.Models.Subscription", b =>
                {
                    b.HasOne("Subs.Domain.Models.SubscriptionComponents.Client", "Client")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Subs.Domain.Models.SubscriptionComponents.Payment", "Payment", b1 =>
                        {
                            b1.Property<Guid>("SubscriptionId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(18,2)");

                            b1.Property<string>("Frequency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Method")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("SubscriptionId");

                            b1.ToTable("Subscriptions");

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionId");

                            b1.OwnsOne("Subs.Domain.Models.SubscriptionComponents.PaymentComponents.Currency", "Currency", b2 =>
                                {
                                    b2.Property<Guid>("PaymentSubscriptionId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Rate")
                                        .HasColumnType("numeric(18,6)");

                                    b2.Property<DateTime>("Reference")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.HasKey("PaymentSubscriptionId");

                                    b2.ToTable("Subscriptions");

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentSubscriptionId");
                                });

                            b1.OwnsOne("Subs.Domain.Models.SubscriptionComponents.PaymentComponents.Discount", "Discount", b2 =>
                                {
                                    b2.Property<Guid>("PaymentSubscriptionId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<decimal>("Value")
                                        .HasColumnType("numeric(18,2)");

                                    b2.HasKey("PaymentSubscriptionId");

                                    b2.ToTable("Subscriptions");

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentSubscriptionId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();

                            b1.Navigation("Discount")
                                .IsRequired();
                        });

                    b.Navigation("Client");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Subs.Domain.Models.SubscriptionComponents.Client", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
